# Copyright 2014 Solinea, Inc.
#
# Licensed under the Solinea Software License Agreement (goldstone),
# Version 1.0 (the "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at:
#
#     http://www.solinea.com/goldstone/LICENSE.pdf
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Author: John Stanford
#


filter {

    # clone all syslog messages to be handled by the host_stream and
    # event_stream outputs.

    if [type] == "syslog" {
	grok { 
            patterns_dir => "/opt/logstash/patterns"
            match => { "message" => "%{GENERIC_SYSLOGLINE}" }
            add_field => { "received_at" => "%{@timestamp}" }
        }
        if ("_grokparsefailure" not in [tags]) {
            syslog_pri {
                severity_labels => ["EMERGENCY", "ALERT", "CRITICAL", "ERROR", "WARNING", "NOTICE", "INFO", "DEBUG"]
                syslog_pri_field_name => "syslog5424_pri"
            }
            # set the event_stream type for the highest severities.  Can
            # be overriden in future rules occuring before the clone.
            if [syslog_severity] in ["EMERGENCY", "ALERT", "CRITICAL", "ERROR"] {
                mutate {
                    add_field => ["event_type", "GenericSyslogError"]
                }
            }
            date {
                match => [ "syslog_ts", "ISO8601" ]
	            add_tag => [ "ISO8601_ts" ]
            }
            date {
                match => [ "syslog_ts", "MMM dd HH:mm:ss" ]
                timezone => "UTC"
	            add_tag => ["Gregorian_MDY_ts", "imprecise_ts"]
            }
            date {
                match => [ "syslog_ts", "yyyy-MM-dd'T'HH:mm:ss.SSSSSSZZ" ]
	            add_tag => ["timezone_aware_ts", "microsecond_resolution_ts"]
            }
            mutate {
	            add_tag => ["filter_20_pass"]
            }
        } else {
	        mutate {
                add_tag => ["filter_20_fail"]
	        }
        }
    }
}
